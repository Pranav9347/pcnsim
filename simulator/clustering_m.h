//
// Generated file, do not edit! Created by opp_msgtool 6.1 from clustering.msg.
//

#ifndef __CLUSTERING_M_H
#define __CLUSTERING_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class ClusterInfoMsg;
class ClusterUpdateMsg;
class MergeRequestMsg;
class MergeAckMsg;
class MergeNackMsg;
class MergeAcceptMsg;
/**
 * Class generated from <tt>clustering.msg:1</tt> by opp_msgtool.
 * <pre>
 * message ClusterInfoMsg
 * {
 *     string sender;
 *     string clusterID;
 *     string CIP;
 *     int numNodes;
 *     int numEdges;
 *     int mergedNumNodes;
 *     int mergedNumEdges;
 * }
 * </pre>
 */
class ClusterInfoMsg : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string sender;
    omnetpp::opp_string clusterID;
    omnetpp::opp_string CIP;
    int numNodes = 0;
    int numEdges = 0;
    int mergedNumNodes = 0;
    int mergedNumEdges = 0;

  private:
    void copy(const ClusterInfoMsg& other);

  protected:
    bool operator==(const ClusterInfoMsg&) = delete;

  public:
    ClusterInfoMsg(const char *name=nullptr, short kind=0);
    ClusterInfoMsg(const ClusterInfoMsg& other);
    virtual ~ClusterInfoMsg();
    ClusterInfoMsg& operator=(const ClusterInfoMsg& other);
    virtual ClusterInfoMsg *dup() const override {return new ClusterInfoMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getSender() const;
    virtual void setSender(const char * sender);

    virtual const char * getClusterID() const;
    virtual void setClusterID(const char * clusterID);

    virtual const char * getCIP() const;
    virtual void setCIP(const char * CIP);

    virtual int getNumNodes() const;
    virtual void setNumNodes(int numNodes);

    virtual int getNumEdges() const;
    virtual void setNumEdges(int numEdges);

    virtual int getMergedNumNodes() const;
    virtual void setMergedNumNodes(int mergedNumNodes);

    virtual int getMergedNumEdges() const;
    virtual void setMergedNumEdges(int mergedNumEdges);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ClusterInfoMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ClusterInfoMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>clustering.msg:11</tt> by opp_msgtool.
 * <pre>
 * message ClusterUpdateMsg
 * {
 *     string newClusterID;
 *     string newCIP;
 * }
 * </pre>
 */
class ClusterUpdateMsg : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string newClusterID;
    omnetpp::opp_string newCIP;

  private:
    void copy(const ClusterUpdateMsg& other);

  protected:
    bool operator==(const ClusterUpdateMsg&) = delete;

  public:
    ClusterUpdateMsg(const char *name=nullptr, short kind=0);
    ClusterUpdateMsg(const ClusterUpdateMsg& other);
    virtual ~ClusterUpdateMsg();
    ClusterUpdateMsg& operator=(const ClusterUpdateMsg& other);
    virtual ClusterUpdateMsg *dup() const override {return new ClusterUpdateMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getNewClusterID() const;
    virtual void setNewClusterID(const char * newClusterID);

    virtual const char * getNewCIP() const;
    virtual void setNewCIP(const char * newCIP);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ClusterUpdateMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ClusterUpdateMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>clustering.msg:16</tt> by opp_msgtool.
 * <pre>
 * message MergeRequestMsg
 * {
 *     string sender;
 *     string clusterID;
 * }
 * </pre>
 */
class MergeRequestMsg : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string sender;
    omnetpp::opp_string clusterID;

  private:
    void copy(const MergeRequestMsg& other);

  protected:
    bool operator==(const MergeRequestMsg&) = delete;

  public:
    MergeRequestMsg(const char *name=nullptr, short kind=0);
    MergeRequestMsg(const MergeRequestMsg& other);
    virtual ~MergeRequestMsg();
    MergeRequestMsg& operator=(const MergeRequestMsg& other);
    virtual MergeRequestMsg *dup() const override {return new MergeRequestMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getSender() const;
    virtual void setSender(const char * sender);

    virtual const char * getClusterID() const;
    virtual void setClusterID(const char * clusterID);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MergeRequestMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MergeRequestMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>clustering.msg:21</tt> by opp_msgtool.
 * <pre>
 * message MergeAckMsg
 * {
 *     string sender;
 *     string acceptedCluster;
 * }
 * </pre>
 */
class MergeAckMsg : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string sender;
    omnetpp::opp_string acceptedCluster;

  private:
    void copy(const MergeAckMsg& other);

  protected:
    bool operator==(const MergeAckMsg&) = delete;

  public:
    MergeAckMsg(const char *name=nullptr, short kind=0);
    MergeAckMsg(const MergeAckMsg& other);
    virtual ~MergeAckMsg();
    MergeAckMsg& operator=(const MergeAckMsg& other);
    virtual MergeAckMsg *dup() const override {return new MergeAckMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getSender() const;
    virtual void setSender(const char * sender);

    virtual const char * getAcceptedCluster() const;
    virtual void setAcceptedCluster(const char * acceptedCluster);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MergeAckMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MergeAckMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>clustering.msg:26</tt> by opp_msgtool.
 * <pre>
 * message MergeNackMsg
 * {
 *     string sender;
 * }
 * </pre>
 */
class MergeNackMsg : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string sender;

  private:
    void copy(const MergeNackMsg& other);

  protected:
    bool operator==(const MergeNackMsg&) = delete;

  public:
    MergeNackMsg(const char *name=nullptr, short kind=0);
    MergeNackMsg(const MergeNackMsg& other);
    virtual ~MergeNackMsg();
    MergeNackMsg& operator=(const MergeNackMsg& other);
    virtual MergeNackMsg *dup() const override {return new MergeNackMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getSender() const;
    virtual void setSender(const char * sender);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MergeNackMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MergeNackMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>clustering.msg:30</tt> by opp_msgtool.
 * <pre>
 * message MergeAcceptMsg
 * {
 *     string sender;
 * }
 * </pre>
 */
class MergeAcceptMsg : public ::omnetpp::cMessage
{
  protected:
    omnetpp::opp_string sender;

  private:
    void copy(const MergeAcceptMsg& other);

  protected:
    bool operator==(const MergeAcceptMsg&) = delete;

  public:
    MergeAcceptMsg(const char *name=nullptr, short kind=0);
    MergeAcceptMsg(const MergeAcceptMsg& other);
    virtual ~MergeAcceptMsg();
    MergeAcceptMsg& operator=(const MergeAcceptMsg& other);
    virtual MergeAcceptMsg *dup() const override {return new MergeAcceptMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getSender() const;
    virtual void setSender(const char * sender);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MergeAcceptMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MergeAcceptMsg& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline ClusterInfoMsg *fromAnyPtr(any_ptr ptr) { return check_and_cast<ClusterInfoMsg*>(ptr.get<cObject>()); }
template<> inline ClusterUpdateMsg *fromAnyPtr(any_ptr ptr) { return check_and_cast<ClusterUpdateMsg*>(ptr.get<cObject>()); }
template<> inline MergeRequestMsg *fromAnyPtr(any_ptr ptr) { return check_and_cast<MergeRequestMsg*>(ptr.get<cObject>()); }
template<> inline MergeAckMsg *fromAnyPtr(any_ptr ptr) { return check_and_cast<MergeAckMsg*>(ptr.get<cObject>()); }
template<> inline MergeNackMsg *fromAnyPtr(any_ptr ptr) { return check_and_cast<MergeNackMsg*>(ptr.get<cObject>()); }
template<> inline MergeAcceptMsg *fromAnyPtr(any_ptr ptr) { return check_and_cast<MergeAcceptMsg*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __CLUSTERING_M_H

